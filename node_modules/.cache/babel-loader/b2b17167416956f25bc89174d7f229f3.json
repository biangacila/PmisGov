{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _noop = require('./noop');\n\nvar initFlowPlayerSetup = function initFlowPlayerSetup(props) {\n  var adaptiveRatio = props.adaptiveRatio,\n      aspectRatio = props.aspectRatio,\n      autoplay = props.autoplay,\n      bgcolor = props.bgcolor,\n      title = props.title,\n      sources = props.sources,\n      fullscreen = props.fullscreen,\n      keyboard = props.keyboard,\n      live = props.live,\n      poster = props.poster,\n      rtmp = props.rtmp,\n      speeds = props.speeds,\n      volume = props.volume,\n      onError = props.onError,\n      onResume = props.onResume,\n      licenseKey = props.licenseKey,\n      logo = props.logo,\n      hlsQualities = props.hlsQualities,\n      splash = props.splash,\n      hlsjs = props.hlsjs,\n      defaultQuality = props.defaultQuality,\n      qualities = props.qualities,\n      vodQualities = props.vodQualities,\n      vastConfig = props.vastConfig,\n      analytics = props.analytics;\n  var config = {\n    clip: {\n      sources: sources,\n      title: title\n    },\n    adaptiveRatio: adaptiveRatio,\n    aspectRatio: aspectRatio,\n    autoplay: autoplay,\n    bgcolor: bgcolor,\n    fullscreen: fullscreen,\n    keyboard: keyboard,\n    live: live,\n    poster: poster,\n    rtmp: rtmp,\n    speeds: speeds,\n    volume: volume,\n    hlsQualities: hlsQualities,\n    splash: splash,\n    hlsjs: hlsjs,\n    ima: vastConfig,\n    analytics: analytics\n  };\n\n  if (defaultQuality) {\n    Object.assign(config.clip, {\n      defaultQuality: defaultQuality\n    });\n  }\n\n  if (qualities) {\n    Object.assign(config.clip, {\n      qualities: qualities\n    });\n  }\n\n  if (vodQualities) {\n    Object.assign(config.clip, {\n      vodQualities: vodQualities\n    });\n  }\n\n  if (licenseKey && licenseKey.length > 0) {\n    config.key = licenseKey;\n\n    if (logo && ((typeof logo === 'undefined' ? 'undefined' : _typeof(logo)) === 'object' && (Object.keys(logo) || []).length > 0 || typeof logo === 'string' && logo.length > 0)) {\n      config.logo = logo;\n    }\n  }\n\n  var player = window.flowplayer('#' + props.playerId, config);\n\n  if (player) {\n    player.on('resume', onResume).on('error', onError);\n    var intervalBreak = setInterval(function () {\n      var item = document.getElementsByClassName('fp-controls');\n\n      if (item) {\n        (props.onLoad || _noop.noop)();\n\n        clearInterval(intervalBreak);\n      }\n    }, 100);\n  }\n};\n\nexports.default = initFlowPlayerSetup;","map":null,"metadata":{},"sourceType":"script"}